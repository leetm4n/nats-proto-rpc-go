syntax = "proto3";

package example.service.v1;

option go_package = "github.com/leetm4n/nats-proto-rpc-go/examples/proto/example/service/v1;exampleservicev1";

import "validate/validate.proto";
import "nats/rpc/v1/annotations.proto";

option (nats.rpc.v1.isFileGenerationTarget) = true;

// TestService is a service with one method
service TestService {
    option (nats.rpc.v1.serviceSubject) = "customname";
    option (nats.rpc.v1.serviceVersion) = "v1";
    option (nats.rpc.v1.isServiceGenerationTarget) = true;
    // SendMessage is used to send a message to a recepient by id
    rpc SendMessage(SendMessageRequest) returns (SendMessageResponse) {}

    // GetMessage is used to get a message by id
    rpc GetMessage(GetMessageRequest) returns (GetMessageResponse) {
        option (nats.rpc.v1.methodSubject) = "fetchmessage";
    }
}

// SendMessageRequest is the request for SendMessage
message SendMessageRequest {
    // The message itself
    string message = 1 [(validate.rules).string.min_len = 1];
    // The recipient email of the message
    string recipient_id = 2 [(validate.rules).string.uuid = true];
}

// SendMessageResponse is the response of SendMessage
message SendMessageResponse {
    // The id of the message sent
    string id = 1 [(validate.rules).string.uuid = true];
}

// GetMessageRequest is the request for GetMessage
message GetMessageRequest {
    // The message id itself
    string id = 1 [(validate.rules).string.uuid = true];
}

// GetMessageResponse is the response of GetMessage
message GetMessageResponse {
    // The id of the message
    string id = 1 [(validate.rules).string.uuid = true];
    // The message itself
    string message = 2 [(validate.rules).string.min_len = 1];
}
